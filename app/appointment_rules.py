"""
Regras e valida√ß√µes para agendamento de consultas.
"""
from datetime import datetime, timedelta, time
from typing import List, Dict, Any, Tuple
import logging

from sqlalchemy.orm import Session

from app.models import Appointment, AppointmentStatus
from app.utils import now_brazil, format_time_br, load_clinic_info, get_brazil_timezone, parse_date_br

logger = logging.getLogger(__name__)


class AppointmentRules:
    """Gerenciador de regras de agendamento"""
    
    def __init__(self):
        self.clinic_info = load_clinic_info()
        self.rules = self.clinic_info.get('regras_agendamento', {})
        self.timezone = get_brazil_timezone()
    
    def reload_clinic_info(self):
        """Recarrega informa√ß√µes da cl√≠nica"""
        self.clinic_info = load_clinic_info()
        self.rules = self.clinic_info.get('regras_agendamento', {})
    
    def get_interval_between_appointments(self) -> int:
        """Retorna intervalo m√≠nimo entre consultas em minutos"""
        return self.rules.get('intervalo_entre_consultas_minutos', 15)
    
    def is_valid_appointment_date(self, appointment_date: datetime) -> Tuple[bool, str]:
        """
        Valida se uma data/hora √© v√°lida para agendamento.
        
        Args:
            appointment_date: Data/hora proposta
            
        Returns:
            (v√°lido, mensagem_erro)
        """
        now = now_brazil()
        
        # 1. Data n√£o pode ser no passado
        # Converter para timezone-aware se necess√°rio
        if appointment_date.tzinfo is None:
            appointment_date = self.timezone.localize(appointment_date)
        if now.tzinfo is None:
            now = self.timezone.localize(now)
            
        if appointment_date <= now:
            return False, "A data deve ser no futuro."
        
        # 2. Verificar dia da semana
        weekday = appointment_date.weekday()  # 0=segunda, 6=domingo
        
        # Domingo sempre fechado
        if weekday == 6:
            return False, "A cl√≠nica n√£o atende aos domingos."
        
        # 4. Verificar hor√°rio de funcionamento
        horarios = self.clinic_info.get('horario_funcionamento', {})
        dias_semana = ['segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado', 'domingo']
        dia_nome = dias_semana[weekday]
        
        horario_dia = horarios.get(dia_nome, "FECHADO")
        if horario_dia == "FECHADO":
            return False, f"A cl√≠nica n√£o atende √†s {dias_semana[weekday]}s."
        
        # 5. Verificar se est√° dentro do hor√°rio de funcionamento
        if '-' in horario_dia:
            inicio_str, fim_str = horario_dia.split('-')
            inicio_h, inicio_m = map(int, inicio_str.split(':'))
            fim_h, fim_m = map(int, fim_str.split(':'))
            
            inicio = time(inicio_h, inicio_m)
            fim = time(fim_h, fim_m)
            
            hora_consulta = appointment_date.time()
            
            if not (inicio <= hora_consulta <= fim):
                return False, f"Hor√°rio fora do expediente. Hor√°rio de atendimento: {horario_dia}"
        
        # 6. S√°bado: verificar se n√£o √© tarde
        if weekday == 5:  # S√°bado
            ultima_hora_sabado = self.rules.get('horario_ultima_consulta_sabado', '11:30')
            h, m = map(int, ultima_hora_sabado.split(':'))
            if appointment_date.time() > time(h, m):
                return False, f"No s√°bado, a √∫ltima consulta √© √†s {ultima_hora_sabado}."
        
        return True, ""
    
    def get_available_slots(
        self,
        target_date: datetime,
        consultation_duration: int,
        db: Session,
        limit: int = None
    ) -> List[datetime]:
        """
        Retorna hor√°rios dispon√≠veis para uma data espec√≠fica.
        
        Args:
            target_date: Data alvo (s√≥ a data importa, hora ser√° ignorada)
            consultation_duration: Dura√ß√£o da consulta em minutos
            db: Sess√£o do banco de dados
            limit: N√∫mero m√°ximo de hor√°rios a retornar
            
        Returns:
            Lista de datetime com hor√°rios dispon√≠veis
        """
        available_slots = []
        
        # Definir hor√°rio de in√≠cio e fim para o dia
        weekday = target_date.weekday()
        horarios = self.clinic_info.get('horario_funcionamento', {})
        dias_semana = ['segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado', 'domingo']
        dia_nome = dias_semana[weekday]
        horario_dia = horarios.get(dia_nome, "FECHADO")
        
        if horario_dia == "FECHADO":
            return []
        
        # Parse hor√°rio
        inicio_str, fim_str = horario_dia.split('-')
        inicio_h, inicio_m = map(int, inicio_str.split(':'))
        fim_h, fim_m = map(int, fim_str.split(':'))
        
        # Criar datetime para in√≠cio e fim
        start_time = target_date.replace(hour=inicio_h, minute=inicio_m, second=0, microsecond=0)
        end_time = target_date.replace(hour=fim_h, minute=fim_m, second=0, microsecond=0)
        
        # Ajustar para s√°bado se necess√°rio
        if weekday == 5:
            ultima_hora_sabado = self.rules.get('horario_ultima_consulta_sabado', '11:30')
            h, m = map(int, ultima_hora_sabado.split(':'))
            end_time = target_date.replace(hour=h, minute=m, second=0, microsecond=0)
        
        # Buscar consultas j√° agendadas no banco - USAR FORMATO STRING
        target_date_str = target_date.strftime('%Y%m%d')  # "20251015"
        
        existing_appointments = db.query(Appointment).filter(
            Appointment.appointment_date == target_date_str,  # Compara√ß√£o STRING
            Appointment.status == AppointmentStatus.AGENDADA  # Apenas consultas ativas
        ).all()
        
        # Gerar slots usando o intervalo configurado
        current = start_time
        slot_step = 5  # Slots a cada 5 minutos
        
        while current < end_time and (limit is None or len(available_slots) < limit):
            slot_end = current + timedelta(minutes=consultation_duration)
            
            # Verificar se o slot √© v√°lido
            is_valid, _ = self.is_valid_appointment_date(current)
            
            if is_valid and slot_end <= end_time:
                # Verificar conflitos com consultas no banco
                has_conflict = False
                
                for appointment in existing_appointments:
                    # Converter STRING para datetime
                    app_date_str = appointment.appointment_date
                    app_date = datetime.strptime(app_date_str, '%Y%m%d').date()
                    
                    # Converter time string para time object
                    if isinstance(appointment.appointment_time, str):
                        app_time = datetime.strptime(appointment.appointment_time, '%H:%M').time()
                    else:
                        app_time = appointment.appointment_time
                    
                    app_start = datetime.combine(app_date, app_time).replace(tzinfo=None)
                    app_end = app_start + timedelta(minutes=appointment.duration_minutes)
                    
                    # Verificar sobreposi√ß√£o
                    if not (slot_end <= app_start or current >= app_end):
                        has_conflict = True
                        break
                
                if not has_conflict:
                    available_slots.append(current)
            
            # Avan√ßar para o pr√≥ximo slot
            current += timedelta(minutes=slot_step)
        
        return available_slots
    
    def format_available_slots_message(self, slots: List[datetime], target_date: datetime = None) -> str:
        """
        Formata lista de hor√°rios dispon√≠veis em mensagem amig√°vel.
        
        Args:
            slots: Lista de datetime
            target_date: Data alvo para adicionar contexto (opcional)
            
        Returns:
            Mensagem formatada
        """
        if not slots:
            return "Infelizmente n√£o h√° hor√°rios dispon√≠veis para esse dia. Poderia me informar outra data?"
        
        message = ""
        
        # Adicionar contexto do dia se fornecido
        if target_date:
            dias_semana = ['segunda-feira', 'ter√ßa-feira', 'quarta-feira', 
                           'quinta-feira', 'sexta-feira', 's√°bado', 'domingo']
            dia_nome = dias_semana[target_date.weekday()]
            
            # Buscar hor√°rio de funcionamento
            horarios = self.clinic_info.get('horario_funcionamento', {})
            dias_semana_key = ['segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado', 'domingo']
            horario_dia = horarios.get(dias_semana_key[target_date.weekday()], "FECHADO")
            
            message += f"üìÖ {target_date.strftime('%d/%m/%Y')} √© {dia_nome}\n"
            message += f"üïí Hor√°rio de funcionamento: {horario_dia}\n"
            message += f"‚è±Ô∏è Dura√ß√£o da consulta: 1 hora\n\n"
        
        message += "‚úÖ Hor√°rios dispon√≠veis:\n\n"
        
        # Agrupar hor√°rios consecutivos em faixas
        grouped_slots = self._group_consecutive_slots(slots)
        
        for i, (start, end) in enumerate(grouped_slots, 1):
            if start == end:
                message += f"{i}. {start.strftime('%H:%M')}\n"
            else:
                message += f"{i}. {start.strftime('%H:%M')} √†s {end.strftime('%H:%M')}\n"
        
        message += "\nEscolha o hor√°rio desejado informando o n√∫mero da op√ß√£o."
        return message
    
    def _group_consecutive_slots(self, slots: List[datetime]) -> List[Tuple[datetime, datetime]]:
        """
        Agrupa hor√°rios consecutivos em faixas.
        
        Exemplo:
        [08:00, 08:05, 08:10, 08:15] ‚Üí [(08:00, 08:15)]
        [08:00, 08:05, 10:00, 10:05] ‚Üí [(08:00, 08:05), (10:00, 10:05)]
        
        Args:
            slots: Lista de datetime ordenada
            
        Returns:
            Lista de tuplas (in√≠cio, fim) das faixas
        """
        if not slots:
            return []
        
        grouped = []
        current_start = slots[0]
        current_end = slots[0]
        
        for i in range(1, len(slots)):
            # Se o pr√≥ximo slot √© 5 min ap√≥s o atual, estender faixa
            if slots[i] == current_end + timedelta(minutes=5):
                current_end = slots[i]
            else:
                # Nova faixa
                grouped.append((current_start, current_end))
                current_start = slots[i]
                current_end = slots[i]
        
        # Adicionar √∫ltima faixa
        grouped.append((current_start, current_end))
        return grouped
    
    def can_modify_appointment(
        self,
        appointment: Appointment,
        patient_name: str,
        patient_birth_date: str
    ) -> Tuple[bool, str]:
        """
        Verifica se um paciente pode modificar (cancelar/remarcar) uma consulta.
        
        Args:
            appointment: Consulta a ser modificada
            patient_name: Nome fornecido pelo paciente
            patient_birth_date: Data de nascimento fornecida
            
        Returns:
            (pode_modificar, mensagem_erro)
        """
        # Verificar se os dados coincidem
        if (appointment.patient.name.lower() != patient_name.lower() or
            appointment.patient.birth_date != patient_birth_date):
            return False, "Os dados fornecidos n√£o correspondem ao agendamento."
        
        # Verificar se a consulta j√° passou
        if appointment.appointment_date <= now_brazil():
            return False, "N√£o √© poss√≠vel modificar uma consulta que j√° passou."
        
        # Verificar se j√° foi cancelada
        # Como n√£o temos mais status, assumimos que todas as consultas est√£o ativas
        return True, "Consulta v√°lida."
    
    def check_slot_availability(
        self,
        target_datetime: datetime,
        consultation_duration: int,
        db: Session
    ) -> bool:
        """
        Verifica se um hor√°rio espec√≠fico est√° dispon√≠vel.
        
        Args:
            target_datetime: Data e hora exata da consulta desejada
            consultation_duration: Dura√ß√£o da consulta em minutos
            db: Sess√£o do banco de dados
            
        Returns:
            True se dispon√≠vel, False se conflita
        """
        # 1. Validar se est√° dentro do hor√°rio de funcionamento
        is_valid, error_msg = self.is_valid_appointment_date(target_datetime)
        if not is_valid:
            return False
        
        # 2. Validar minutos (deve ser m√∫ltiplo de 5)
        if target_datetime.minute % 5 != 0:
            return False
        
        # 3. Buscar consultas do dia - USAR FORMATO COM H√çFEN
        target_date_str = target_datetime.strftime('%Y%m%d')  # Formato YYYYMMDD "20251022"
        
        existing_appointments = db.query(Appointment).filter(
            Appointment.appointment_date == target_date_str,
            Appointment.status == AppointmentStatus.AGENDADA
        ).all()
        
        # 4. Calcular fim da nova consulta
        slot_end = target_datetime + timedelta(minutes=consultation_duration)
        
        # 5. Verificar conflitos - CONVERTER STRINGS PARA DATETIME
        had_errors = False
        for appointment in existing_appointments:
            try:
                # Converter appointment_date para formato DD/MM/YYYY
                app_date_str = appointment.appointment_date
                if len(app_date_str) == 8 and app_date_str.isdigit():
                    # Formato YYYYMMDD -> DD/MM/YYYY
                    app_date_str = f"{app_date_str[6:8]}/{app_date_str[4:6]}/{app_date_str[:4]}"
                
                # Converter string para datetime
                app_date = parse_date_br(app_date_str)
                
                # Garantir convers√£o correta de appointment_time
                if isinstance(appointment.appointment_time, time):
                    # J√° √© time object, usar direto
                    app_time = appointment.appointment_time
                else:
                    # √â string - remover segundos se existir (ex: "15:00:00" ‚Üí "15:00")
                    app_time_str = str(appointment.appointment_time)
                    if app_time_str.count(':') == 2:
                        # Tem segundos, remover
                        app_time_str = ':'.join(app_time_str.split(':')[:2])
                    app_time = datetime.strptime(app_time_str, '%H:%M').time()
                
                app_start = datetime.combine(app_date.date(), app_time).replace(tzinfo=None)
                app_end = app_start + timedelta(minutes=appointment.duration_minutes)
                
                # Verificar sobreposi√ß√£o: novo slot N√ÉO deve sobrepor consulta existente
                if not (slot_end <= app_start or target_datetime >= app_end):
                    logger.info(f"‚ö†Ô∏è Conflito encontrado: Nova consulta {target_datetime.strftime('%H:%M')} conflita com consulta existente {app_start.strftime('%H:%M')}-{app_end.strftime('%H:%M')}")
                    return False
                    
            except Exception as e:
                logger.error(f"Erro ao verificar conflito de agendamento: {str(e)}")
                logger.error(f"  appointment_time: {appointment.appointment_time} (type: {type(appointment.appointment_time)})")
                had_errors = True
                # N√ÉO fazer continue - marcar erro mas continuar verificando
        
        # Se houve erros, rejeitar por seguran√ßa
        if had_errors:
            logger.error("‚õî Rejeitando hor√°rio por seguran√ßa devido a erros na verifica√ß√£o")
            return False
        
        return True

# Inst√¢ncia global
appointment_rules = AppointmentRules()

