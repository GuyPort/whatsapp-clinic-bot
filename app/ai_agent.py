"""
Agente de IA com Claude SDK + Tools para agendamento de consultas.
Vers√£o completa com menu estruturado e gerenciamento de contexto.
Corrigido: persist√™ncia de contexto + loop de processamento de tools.
"""
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Tuple
import json
import logging
from anthropic import Anthropic

from sqlalchemy.orm import Session
from sqlalchemy.orm.attributes import flag_modified

from app.simple_config import settings
from app.models import Appointment, AppointmentStatus, ConversationContext
from app.utils import (
    load_clinic_info, normalize_phone, parse_date_br, 
    format_datetime_br, now_brazil, get_brazil_timezone
)
from app.appointment_rules import appointment_rules

logger = logging.getLogger(__name__)


class ClaudeToolAgent:
    """Agente de IA com Claude SDK + Tools para agendamento de consultas"""
    
    def __init__(self):
        self.client = Anthropic(api_key=settings.anthropic_api_key)
        self.clinic_info = load_clinic_info()
        self.timezone = get_brazil_timezone()
        self.tools = self._define_tools()
        self.system_prompt = self._create_system_prompt()
        
    def _create_system_prompt(self) -> str:
        """Cria o prompt do sistema para o Claude"""
        clinic_name = self.clinic_info.get('nome_clinica', 'Cl√≠nica')
        endereco = self.clinic_info.get('endereco', 'Endere√ßo n√£o informado')
        horarios = self.clinic_info.get('horario_funcionamento', {})
        
        horarios_str = ""
        for dia, horario in horarios.items():
            if horario != "FECHADO":
                horarios_str += f"‚Ä¢ {dia.capitalize()}: {horario}\n"
        
        duracao = self.clinic_info.get('regras_agendamento', {}).get('duracao_consulta_minutos', 45)
        
        return f"""Voc√™ √© a assistente virtual da {clinic_name}.

INFORMA√á√ïES DA CL√çNICA:
üìç Endere√ßo: {endereco}
‚è∞ Hor√°rios de funcionamento:
{horarios_str}
‚è±Ô∏è Dura√ß√£o das consultas: {duracao} minutos
üìû Telefone: {self.clinic_info.get('telefone', 'N√£o informado')}

MENU PRINCIPAL:
Quando o paciente enviar qualquer mensagem, SEMPRE responda com este menu:

"Ol√°! Bem-vindo(a) √† {clinic_name}! üòä
Como posso te ajudar hoje?

‚ø° Marcar consulta
‚ø¢ Remarcar/Cancelar consulta  
‚ø£ Tirar d√∫vidas

Digite o n√∫mero da op√ß√£o desejada."

FLUXO DE AGENDAMENTO (SEQUENCIAL):
Quando o paciente escolher "1 - Marcar consulta", siga EXATAMENTE este fluxo:

1. "Perfeito! Vamos marcar sua consulta. üòä
   Primeiro, me informe seu nome completo:"

2. Ap√≥s receber o nome:
   "Obrigado! Agora me informe sua data de nascimento (DD/MM/AAAA):"

3. Ap√≥s receber a data de nascimento:
   "Perfeito! Agora me informe o dia que gostaria de marcar a consulta (DD/MM/AAAA):"

4. Ap√≥s receber a data desejada:
   "√ìtimo! E que hor√°rio voc√™ prefere? (HH:MM - ex: 14:30):"

5. **FLUXO CR√çTICO - Ap√≥s receber hor√°rio:**
   a) Execute validate_and_check_availability com data e hora
   b) Leia o resultado da tool:
      - Se cont√©m "dispon√≠vel" ‚Üí Execute IMEDIATAMENTE create_appointment
      - Se cont√©m "n√£o est√° dispon√≠vel" ‚Üí Explique e pe√ßa outro hor√°rio
      - Se cont√©m "fora do hor√°rio" ‚Üí Explique e pe√ßa outro hor√°rio
   c) NUNCA termine sem executar create_appointment quando dispon√≠vel
   d) SEMPRE retorne uma mensagem amig√°vel ao usu√°rio ap√≥s criar agendamento

REGRA IMPORTANTE: Voc√™ DEVE executar m√∫ltiplas tools em sequ√™ncia quando necess√°rio.
N√ÉO retorne "end_turn" ap√≥s validate_and_check_availability se o hor√°rio est√° dispon√≠vel!

ENCERRAMENTO DE CONVERSAS:
Ap√≥s QUALQUER tarefa conclu√≠da (agendamento criado, cancelamento realizado, d√∫vida respondida):
- SEMPRE perguntar: "Posso te ajudar com mais alguma coisa?"
- Se SIM ou usu√°rio fizer nova pergunta: continuar com contexto
- Se N√ÉO ou "n√£o preciso de mais nada": executar tool 'end_conversation'

ATENDIMENTO HUMANO:
Se o usu√°rio pedir para "falar com algu√©m", "atendente", "secret√°ria", "humano", etc:
- Execute IMEDIATAMENTE a tool 'request_human_assistance'
- N√ÉO pergunte confirma√ß√£o, execute direto

REGRAS IMPORTANTES:
- SEMPRE pe√ßa UMA informa√ß√£o por vez
- NUNCA pe√ßa nome, data de nascimento, data e hor√°rio na mesma mensagem
- Use as tools dispon√≠veis para validar hor√°rios e disponibilidade
- NUNCA mostre mensagens de confirma√ß√£o antes de executar tools
- Execute tools automaticamente quando necess√°rio
- Seja sempre educada e prestativa
- Confirme os dados antes de finalizar o agendamento

FERRAMENTAS DISPON√çVEIS:
- get_clinic_info: Obter informa√ß√µes da cl√≠nica
- validate_business_hours: Validar se hor√°rio est√° dentro do funcionamento
- validate_and_check_availability: Validar hor√°rio espec√≠fico (funcionamento + disponibilidade)
- create_appointment: Criar novo agendamento
- search_appointments: Buscar agendamentos existentes
- cancel_appointment: Cancelar agendamento
- request_human_assistance: Transferir para atendimento humano
- end_conversation: Encerrar conversa quando usu√°rio n√£o precisa de mais nada

Lembre-se: Seja sempre educada, prestativa e siga o fluxo sequencial!"""

    def _define_tools(self) -> List[Dict]:
        """Define as tools dispon√≠veis para o Claude"""
        return [
            {
                "name": "get_clinic_info",
                "description": "Obter informa√ß√µes da cl√≠nica (hor√°rios, endere√ßo, etc.)",
                "input_schema": {
                    "type": "object",
                    "properties": {},
                    "required": []
                }
            },
            {
                "name": "validate_business_hours",
                "description": "Validar se um hor√°rio est√° dentro do funcionamento da cl√≠nica",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "Data no formato DD/MM/AAAA"
                        },
                        "time": {
                            "type": "string", 
                            "description": "Hor√°rio no formato HH:MM"
                        }
                    },
                    "required": ["date", "time"]
                }
            },
            {
                "name": "validate_and_check_availability",
                "description": "Validar se um hor√°rio espec√≠fico est√° dispon√≠vel (funcionamento + conflitos)",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string",
                            "description": "Data no formato DD/MM/AAAA"
                        },
                        "time": {
                            "type": "string",
                            "description": "Hor√°rio no formato HH:MM"
                        }
                    },
                    "required": ["date", "time"]
                }
            },
            {
                "name": "create_appointment",
                "description": "Criar um novo agendamento de consulta",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "patient_name": {
                            "type": "string",
                            "description": "Nome completo do paciente"
                        },
                        "patient_phone": {
                            "type": "string",
                            "description": "Telefone do paciente"
                        },
                        "patient_birth_date": {
                            "type": "string",
                            "description": "Data de nascimento no formato DD/MM/AAAA"
                        },
                        "appointment_date": {
                            "type": "string",
                            "description": "Data da consulta no formato DD/MM/AAAA"
                        },
                        "appointment_time": {
                            "type": "string",
                            "description": "Hor√°rio da consulta no formato HH:MM"
                        },
                        "notes": {
                            "type": "string",
                            "description": "Observa√ß√µes adicionais (opcional)"
                        }
                    },
                    "required": ["patient_name", "patient_phone", "patient_birth_date", "appointment_date", "appointment_time"]
                }
            },
            {
                "name": "search_appointments",
                "description": "Buscar agendamentos por telefone ou nome do paciente",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "phone": {
                            "type": "string",
                            "description": "Telefone do paciente para buscar"
                        },
                        "name": {
                            "type": "string",
                            "description": "Nome do paciente para buscar"
                        }
                    },
                    "required": []
                }
            },
            {
                "name": "cancel_appointment",
                "description": "Cancelar um agendamento existente",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "appointment_id": {
                            "type": "integer",
                            "description": "ID do agendamento a ser cancelado"
                        },
                        "reason": {
                            "type": "string",
                            "description": "Motivo do cancelamento"
                        }
                    },
                    "required": ["appointment_id", "reason"]
                }
            },
            {
                "name": "request_human_assistance",
                "description": "Transferir atendimento para humano quando solicitado",
                "input_schema": {
                    "type": "object",
                    "properties": {},
                    "required": []
                }
            },
            {
                "name": "end_conversation",
                "description": "Encerrar conversa e limpar contexto quando usu√°rio n√£o precisa de mais nada",
                "input_schema": {
                    "type": "object",
                    "properties": {},
                    "required": []
                }
            }
        ]

    def _extract_appointment_data_from_messages(self, messages: list) -> dict:
        """
        Extrai dados de agendamento do hist√≥rico de mensagens.
        Percorre as √∫ltimas mensagens para encontrar:
        - Nome do paciente
        - Data de nascimento
        - Data da consulta
        - Hor√°rio da consulta
        """
        data = {
            "patient_name": None,
            "patient_birth_date": None,
            "appointment_date": None,
            "appointment_time": None
        }
        
        logger.info(f"üîç Extraindo dados de {len(messages)} mensagens")
        
        # Percorrer mensagens do mais recente para o mais antigo
        for i in range(len(messages) - 1, -1, -1):
            msg = messages[i]
            
            # Pular mensagens do bot
            if msg.get("role") != "user":
                continue
            
            content = msg.get("content", "").strip()
            
            # Extrair hor√°rio (formato HH:MM)
            if not data["appointment_time"] and ":" in content:
                import re
                time_match = re.match(r'^(\d{1,2}):(\d{2})$', content)
                if time_match:
                    data["appointment_time"] = content
                    continue
            
            # Extrair data (formato DD/MM/AAAA)
            if "/" in content:
                import re
                date_match = re.match(r'^(\d{2})/(\d{2})/(\d{4})$', content)
                if date_match:
                    # Verificar se √© data de nascimento ou data da consulta
                    day, month, year = date_match.groups()
                    year_int = int(year)
                    
                    # Se ano < 2010, provavelmente √© data de nascimento
                    if year_int < 2010 and not data["patient_birth_date"]:
                        data["patient_birth_date"] = content
                    # Sen√£o, √© data da consulta
                    elif not data["appointment_date"]:
                        data["appointment_date"] = content
                    continue
            
            # Extrair nome (primeira mensagem que n√£o √© n√∫mero e n√£o tem formata√ß√£o espec√≠fica)
            if not data["patient_name"] and len(content) > 3 and not content.isdigit():
                # Verificar se n√£o √© o "Ol√°!" inicial ou op√ß√£o do menu
                if content.lower() not in ["ol√°", "ol√°!", "oi", "oi!", "1", "2", "3"]:
                    data["patient_name"] = content
        
        logger.info(f"‚úÖ Nome extra√≠do: {data['patient_name']}")
        logger.info(f"‚úÖ Data nascimento: {data['patient_birth_date']}")
        logger.info(f"‚úÖ Data consulta: {data['appointment_date']}")
        logger.info(f"‚úÖ Hor√°rio: {data['appointment_time']}")
        
        return data

    def process_message(self, message: str, phone: str, db: Session) -> str:
        """Processa uma mensagem do usu√°rio e retorna a resposta com contexto persistente"""
        try:
            # 1. Carregar contexto do banco
            context = db.query(ConversationContext).filter_by(phone=phone).first()
            if not context:
                # Primeira mensagem deste usu√°rio, criar contexto novo
                context = ConversationContext(
                    phone=phone,
                    messages=[],
                    status="active"
                )
                db.add(context)
                logger.info(f"üÜï Novo contexto criado para {phone}")
            else:
                logger.info(f"üì± Contexto carregado para {phone}: {len(context.messages)} mensagens")
            
            # 2. Verificar timeout de inatividade (30 minutos)
            if context.last_activity:
                inactivity = datetime.utcnow() - context.last_activity
                if inactivity > timedelta(minutes=30):
                    # Contexto expirou - limpar e avisar
                    logger.info(f"‚è∞ Contexto expirado por inatividade para {phone}")
                    context.messages = []
                    context.flow_data = {}
                    context.status = "expired"
                    flag_modified(context, 'messages')
                    flag_modified(context, 'flow_data')
                    
                    # Adicionar mensagem de aviso ao in√≠cio
                    context.messages.append({
                        "role": "assistant",
                        "content": "Ol√°! Como voc√™ ficou um tempo sem responder, encerramos a sess√£o anterior. Vamos recome√ßar! üòä\n\nComo posso te ajudar hoje?\n1 Marcar consulta\n2 Remarcar/Cancelar consulta\n3 Tirar d√∫vidas",
                        "timestamp": datetime.utcnow().isoformat()
                    })
                    flag_modified(context, 'messages')
                    context.last_activity = datetime.utcnow()
                    db.commit()
                    return context.messages[-1]["content"]
            
            # 3. Adicionar mensagem do usu√°rio ao hist√≥rico
            context.messages.append({
                "role": "user",
                "content": message,
                "timestamp": datetime.utcnow().isoformat()
            })
            flag_modified(context, 'messages')
            
            # 4. Preparar mensagens para Claude (hist√≥rico completo)
            claude_messages = []
            for msg in context.messages:
                claude_messages.append({
                    "role": msg["role"],
                    "content": msg["content"]
                })
            
            # 5. Fazer chamada para o Claude com hist√≥rico completo
            logger.info(f"ü§ñ Enviando {len(claude_messages)} mensagens para Claude")
            response = self.client.messages.create(
                model="claude-3-5-sonnet-20241022",
                max_tokens=2000,
                temperature=0.1,
                system=self.system_prompt,
                messages=claude_messages,  # ‚úÖ HIST√ìRICO COMPLETO!
                tools=self.tools
            )
            
            # 6. Processar resposta do Claude
            if response.content:
                content = response.content[0]
                
                if content.type == "text":
                    bot_response = content.text
                elif content.type == "tool_use":
                    # Loop para processar m√∫ltiplas tools em sequ√™ncia
                    max_iterations = 5  # Limite de seguran√ßa para evitar loops infinitos
                    iteration = 0
                    current_response = response
                    
                    while iteration < max_iterations:
                        iteration += 1
                        
                        # Verificar se h√° content na resposta
                        if not current_response.content or len(current_response.content) == 0:
                            logger.warning(f"‚ö†Ô∏è Iteration {iteration}: Claude retornou resposta vazia")
                            # Se h√° tool_result anterior, usar como fallback
                            if 'tool_result' in locals():
                                # Se tool_result indica disponibilidade, tentar criar agendamento automaticamente
                                if "dispon√≠vel" in tool_result.lower() and "validate_and_check_availability" in str(locals()):
                                    # Extrair dados das mensagens e criar agendamento diretamente
                                    logger.warning("‚ö†Ô∏è Claude n√£o criou agendamento, fazendo fallback autom√°tico")
                                    try:
                                        # Extrair dados do hist√≥rico de mensagens
                                        appointment_data = self._extract_appointment_data_from_messages(context.messages)
                                        
                                        # Adicionar telefone do paciente (dispon√≠vel no contexto phone)
                                        appointment_data["patient_phone"] = phone
                                        
                                        logger.info(f"üìã Dados extra√≠dos: {appointment_data}")
                                        
                                        # Validar se todos os dados foram extra√≠dos
                                        if all(appointment_data.values()):
                                            appointment_result = self._handle_create_appointment(appointment_data, db)
                                            bot_response = f"Perfeito! {appointment_result}"
                                        else:
                                            logger.error(f"‚ùå Dados incompletos extra√≠dos: {appointment_data}")
                                            bot_response = "Desculpe, n√£o consegui extrair todos os dados necess√°rios. Vamos tentar novamente?"
                                    except Exception as e:
                                        logger.error(f"Erro no fallback autom√°tico: {e}", exc_info=True)
                                        bot_response = tool_result
                                else:
                                    bot_response = tool_result
                            else:
                                bot_response = "Desculpe, n√£o consegui processar sua solicita√ß√£o completamente."
                            break
                        
                        content = current_response.content[0]
                        
                        if content.type == "text":
                            # Claude retornou texto final, sair do loop
                            bot_response = content.text
                            break
                        elif content.type == "tool_use":
                            # Executar tool
                            tool_result = self._execute_tool(content.name, content.input, db, phone)
                            
                            # Verifica√ß√£o especial para validate_and_check_availability
                            if content.name == "validate_and_check_availability":
                                if "dispon√≠vel" in tool_result.lower() and "n√£o" not in tool_result.lower():
                                    # Hor√°rio dispon√≠vel, adicionar hint para Claude criar agendamento
                                    tool_result += "\n\n[SYSTEM: Execute create_appointment agora com os dados coletados: nome, data_nascimento, data_consulta, horario_consulta]"
                            
                            logger.info(f"üîß Iteration {iteration}: Tool {content.name} result: {tool_result[:200] if len(tool_result) > 200 else tool_result}")
                            
                            # Fazer follow-up com o resultado
                            current_response = self.client.messages.create(
                                model="claude-3-5-sonnet-20241022",
                                max_tokens=2000,
                                temperature=0.1,
                                system=self.system_prompt,
                                messages=claude_messages + [
                                    {"role": "assistant", "content": current_response.content},
                                    {
                                        "role": "user",
                                        "content": [
                                            {
                                                "type": "tool_result",
                                                "tool_use_id": content.id,
                                                "content": tool_result
                                            }
                                        ]
                                    }
                                ]
                            )
                            logger.info(f"üìã Response content length: {len(current_response.content) if current_response.content else 0}")
                            logger.info(f"üìã Response stop_reason: {current_response.stop_reason}")
                            
                            # Continuar loop para processar pr√≥xima resposta
                        else:
                            # Tipo desconhecido, sair do loop
                            logger.warning(f"‚ö†Ô∏è Tipo de conte√∫do desconhecido: {content.type}")
                            bot_response = tool_result if 'tool_result' in locals() else "Desculpe, n√£o consegui processar sua mensagem."
                            break
                    
                    # Se atingiu o limite de itera√ß√µes sem retornar texto
                    if iteration >= max_iterations:
                        logger.error(f"‚ùå Limite de itera√ß√µes atingido ({max_iterations})")
                        if 'tool_result' in locals():
                            logger.info(f"üì§ Usando √∫ltimo tool_result como resposta")
                            bot_response = tool_result
                        else:
                            bot_response = "Desculpe, houve um problema ao processar sua solicita√ß√£o. Tente novamente."
                else:
                    bot_response = "Desculpe, n√£o consegui processar sua mensagem. Tente novamente."
            else:
                bot_response = "Desculpe, n√£o consegui processar sua mensagem. Tente novamente."
            
            # 7. Salvar resposta do Claude no hist√≥rico
            context.messages.append({
                "role": "assistant",
                "content": bot_response,
                "timestamp": datetime.utcnow().isoformat()
            })
            flag_modified(context, 'messages')
            
            # 8. Atualizar contexto no banco
            context.last_activity = datetime.utcnow()
            db.commit()
            
            logger.info(f"üíæ Contexto salvo para {phone}: {len(context.messages)} mensagens")
            return bot_response
                
        except Exception as e:
            logger.error(f"Erro ao processar mensagem: {str(e)}")
            return "Desculpe, ocorreu um erro. Tente novamente em alguns instantes."

    def _execute_tool(self, tool_name: str, tool_input: Dict, db: Session, phone: str = None) -> str:
        """Executa uma tool espec√≠fica"""
        try:
            logger.info(f"üîß Executando tool: {tool_name} com input: {tool_input}")
            
            if tool_name == "get_clinic_info":
                return self._handle_get_clinic_info(tool_input)
            elif tool_name == "validate_business_hours":
                return self._handle_validate_business_hours(tool_input)
            elif tool_name == "validate_and_check_availability":
                return self._handle_validate_and_check_availability(tool_input, db)
            elif tool_name == "create_appointment":
                return self._handle_create_appointment(tool_input, db)
            elif tool_name == "search_appointments":
                return self._handle_search_appointments(tool_input, db)
            elif tool_name == "cancel_appointment":
                return self._handle_cancel_appointment(tool_input, db)
            elif tool_name == "request_human_assistance":
                return self._handle_request_human_assistance(tool_input, db, phone)
            elif tool_name == "end_conversation":
                return self._handle_end_conversation(tool_input, db, phone)
            else:
                logger.warning(f"‚ùå Tool n√£o reconhecida: {tool_name}")
                return f"Tool '{tool_name}' n√£o reconhecida."
        except Exception as e:
            logger.error(f"Erro ao executar tool {tool_name}: {str(e)}")
            return f"Erro ao executar {tool_name}: {str(e)}"

    def _handle_get_clinic_info(self, tool_input: Dict) -> str:
        """Tool: get_clinic_info"""
        try:
            clinic_name = self.clinic_info.get('nome_clinica', 'Cl√≠nica')
            endereco = self.clinic_info.get('endereco', 'Endere√ßo n√£o informado')
            telefone = self.clinic_info.get('telefone', 'N√£o informado')
            
            response = f"üè• **{clinic_name}**\n\n"
            response += f"üìç **Endere√ßo:** {endereco}\n"
            response += f"üìû **Telefone:** {telefone}\n\n"
            response += "‚è∞ **Hor√°rios de funcionamento:**\n"
            response += self._format_business_hours()
            
            return response
        except Exception as e:
            logger.error(f"Erro ao obter informa√ß√µes da cl√≠nica: {str(e)}")
            return f"Erro ao obter informa√ß√µes: {str(e)}"

    def _handle_validate_business_hours(self, tool_input: Dict) -> str:
        """Tool: validate_business_hours"""
        try:
            date_str = tool_input.get("date")
            time_str = tool_input.get("time")
            
            if not date_str or not time_str:
                return "Data e hor√°rio s√£o obrigat√≥rios."
            
            # Converter data
            appointment_date = parse_date_br(date_str)
            if not appointment_date:
                return "Data inv√°lida. Use o formato DD/MM/AAAA."
            
            # Obter dia da semana
            weekday = appointment_date.strftime('%A').lower()
            weekday_map = {
                'monday': 'segunda',
                'tuesday': 'terca', 
                'wednesday': 'quarta',
                'thursday': 'quinta',
                'friday': 'sexta',
                'saturday': 'sabado',
                'sunday': 'domingo'
            }
            weekday_pt = weekday_map.get(weekday, weekday)
            
            # Verificar hor√°rios de funcionamento
            horarios = self.clinic_info.get('horario_funcionamento', {})
            horario_dia = horarios.get(weekday_pt, "FECHADO")
            
            if horario_dia == "FECHADO":
                return f"‚ùå A cl√≠nica n√£o funciona aos {weekday_pt}s. Hor√°rios de funcionamento:\n" + \
                       self._format_business_hours()
            
            # Verificar se hor√°rio est√° dentro do funcionamento
            try:
                hora_consulta = datetime.strptime(time_str, '%H:%M').time()
                hora_inicio, hora_fim = horario_dia.split('-')
                hora_inicio = datetime.strptime(hora_inicio, '%H:%M').time()
                hora_fim = datetime.strptime(hora_fim, '%H:%M').time()
                
                if hora_inicio <= hora_consulta <= hora_fim:
                    return f"‚úÖ Hor√°rio v√°lido! A cl√≠nica funciona das {hora_inicio.strftime('%H:%M')} √†s {hora_fim.strftime('%H:%M')} aos {weekday_pt}s."
                else:
                    return f"‚ùå Hor√°rio inv√°lido! A cl√≠nica funciona das {hora_inicio.strftime('%H:%M')} √†s {hora_fim.strftime('%H:%M')} aos {weekday_pt}s.\n" + \
                           f"Por favor, escolha um hor√°rio entre {hora_inicio.strftime('%H:%M')} e {hora_fim.strftime('%H:%M')}."
                           
            except ValueError:
                return "Formato de hor√°rio inv√°lido. Use HH:MM (ex: 14:30)."
            
        except Exception as e:
            logger.error(f"Erro ao validar hor√°rio: {str(e)}")
            return f"Erro ao validar hor√°rio: {str(e)}"

    def _format_business_hours(self) -> str:
        """Formata hor√°rios de funcionamento para exibi√ß√£o"""
        horarios = self.clinic_info.get('horario_funcionamento', {})
        response = ""
        
        for dia, horario in horarios.items():
            if horario != "FECHADO":
                response += f"‚Ä¢ {dia.capitalize()}: {horario}\n"
        
        return response
    
    def _handle_validate_and_check_availability(self, tool_input: Dict, db: Session) -> str:
        """Tool: validate_and_check_availability - Valida hor√°rio de funcionamento + disponibilidade"""
        try:
            logger.info(f"üîç Tool validate_and_check_availability chamada com input: {tool_input}")
            
            date_str = tool_input.get("date")
            time_str = tool_input.get("time")
            
            if not date_str or not time_str:
                logger.warning("‚ùå Data ou hor√°rio n√£o fornecidos")
                return "Data e hor√°rio s√£o obrigat√≥rios."
            
            logger.info(f"üìÖ Validando: {date_str} √†s {time_str}")
            
            # 1. Converter data
            appointment_date = parse_date_br(date_str)
            if not appointment_date:
                logger.warning(f"‚ùå Data inv√°lida: {date_str}")
                return "Data inv√°lida. Use o formato DD/MM/AAAA."
            
            # 2. Validar hor√°rio de funcionamento
            weekday = appointment_date.strftime('%A').lower()
            weekday_map = {
                'monday': 'segunda',
                'tuesday': 'terca', 
                'wednesday': 'quarta',
                'thursday': 'quinta',
                'friday': 'sexta',
                'saturday': 'sabado',
                'sunday': 'domingo'
            }
            weekday_pt = weekday_map.get(weekday, weekday)
            
            horarios = self.clinic_info.get('horario_funcionamento', {})
            horario_dia = horarios.get(weekday_pt, "FECHADO")
            
            if horario_dia == "FECHADO":
                logger.warning(f"‚ùå Cl√≠nica fechada aos {weekday_pt}s")
                return f"‚ùå A cl√≠nica n√£o funciona aos {weekday_pt}s. Hor√°rios de funcionamento:\n" + \
                       self._format_business_hours()
            
            # 3. Verificar se hor√°rio est√° dentro do funcionamento
            try:
                hora_consulta = datetime.strptime(time_str, '%H:%M').time()
                hora_inicio, hora_fim = horario_dia.split('-')
                hora_inicio = datetime.strptime(hora_inicio, '%H:%M').time()
                hora_fim = datetime.strptime(hora_fim, '%H:%M').time()
                
                if not (hora_inicio <= hora_consulta <= hora_fim):
                    logger.warning(f"‚ùå Hor√°rio {time_str} fora do funcionamento")
                    return f"‚ùå Hor√°rio inv√°lido! A cl√≠nica funciona das {hora_inicio.strftime('%H:%M')} √†s {hora_fim.strftime('%H:%M')} aos {weekday_pt}s.\n" + \
                           f"Por favor, escolha um hor√°rio entre {hora_inicio.strftime('%H:%M')} e {hora_fim.strftime('%H:%M')}."
                           
            except ValueError:
                logger.warning(f"‚ùå Formato de hor√°rio inv√°lido: {time_str}")
                return "Formato de hor√°rio inv√°lido. Use HH:MM (ex: 14:30)."
            
            # 4. Verificar disponibilidade no banco de dados
            appointment_datetime = datetime.combine(appointment_date.date(), hora_consulta)
            duracao = self.clinic_info.get('regras_agendamento', {}).get('duracao_consulta_minutos', 45)
            interval = self.clinic_info.get('regras_agendamento', {}).get('intervalo_entre_consultas_minutos', 15)
            
            # Buscar consultas conflitantes
            day_start = appointment_datetime.replace(hour=0, minute=0, second=0, microsecond=0)
            day_end = day_start + timedelta(days=1)
            
            existing_appointments = db.query(Appointment).filter(
                Appointment.appointment_date >= day_start.date(),
                Appointment.appointment_date < day_end.date(),
                Appointment.status == AppointmentStatus.AGENDADA
            ).all()
            
            # Verificar conflitos
            slot_end = appointment_datetime + timedelta(minutes=duracao)
            
            for appointment in existing_appointments:
                app_start = datetime.combine(appointment.appointment_date, appointment.appointment_time)
                app_end = app_start + timedelta(minutes=appointment.duration_minutes + interval)
                
                # Verificar sobreposi√ß√£o
                if not (slot_end <= app_start or appointment_datetime >= app_end):
                    logger.warning(f"‚ùå Conflito encontrado: {appointment.patient_name} das {app_start.strftime('%H:%M')} √†s {app_end.strftime('%H:%M')}")
                    return f"‚ùå Hor√°rio {time_str} j√° est√° ocupado. Por favor, escolha outro hor√°rio."
            
            logger.info(f"‚úÖ Hor√°rio {time_str} dispon√≠vel!")
            return f"‚úÖ Hor√°rio {time_str} dispon√≠vel! Pode prosseguir com o agendamento."
            
        except Exception as e:
            logger.error(f"Erro ao validar disponibilidade: {str(e)}")
            return f"Erro ao validar disponibilidade: {str(e)}"
    
    def _handle_check_availability(self, tool_input: Dict, db: Session) -> str:
        """Tool: check_availability"""
        try:
            logger.info(f"üîç Tool check_availability chamada com input: {tool_input}")
            
            date_str = tool_input.get("date")
            if not date_str:
                logger.warning("‚ùå Data n√£o fornecida na tool check_availability")
                return "Data √© obrigat√≥ria."
            
            logger.info(f"üìÖ Verificando disponibilidade para data: {date_str}")
            
            # Converter data
            appointment_date = parse_date_br(date_str)
            if not appointment_date:
                logger.warning(f"‚ùå Data inv√°lida: {date_str}")
                return "Data inv√°lida. Use o formato DD/MM/AAAA."
            
            logger.info(f"üìÖ Data convertida: {appointment_date}")
            
            # Obter hor√°rios dispon√≠veis
            duracao = self.clinic_info.get('regras_agendamento', {}).get('duracao_consulta_minutos', 45)
            logger.info(f"‚è±Ô∏è Dura√ß√£o da consulta: {duracao} minutos")
            
            available_slots = appointment_rules.get_available_slots(appointment_date, duracao, db)
            logger.info(f"üìã Slots encontrados: {len(available_slots)}")
            
            if not available_slots:
                logger.warning(f"‚ùå Nenhum hor√°rio dispon√≠vel para {appointment_date.strftime('%d/%m/%Y')}")
                return f"‚ùå N√£o h√° hor√°rios dispon√≠veis para {appointment_date.strftime('%d/%m/%Y')}.\n" + \
                       "Por favor, escolha outra data."
            
            response = f"‚úÖ Hor√°rios dispon√≠veis para {appointment_date.strftime('%d/%m/%Y')}:\n\n"
            for i, slot in enumerate(available_slots, 1):
                response += f"{i}. {slot.strftime('%H:%M')}\n"
            
            response += f"\n‚è±Ô∏è Dura√ß√£o: {duracao} minutos\n"
            response += "Escolha um hor√°rio e me informe o n√∫mero da op√ß√£o desejada."
            
            logger.info(f"‚úÖ Resposta da tool: {response}")
            return response
            
        except Exception as e:
            logger.error(f"Erro ao verificar disponibilidade: {str(e)}")
            return f"Erro ao verificar disponibilidade: {str(e)}"

    def _handle_create_appointment(self, tool_input: Dict, db: Session) -> str:
        """Tool: create_appointment"""
        try:
            patient_name = tool_input.get("patient_name")
            patient_phone = tool_input.get("patient_phone")
            patient_birth_date = tool_input.get("patient_birth_date")
            appointment_date = tool_input.get("appointment_date")
            appointment_time = tool_input.get("appointment_time")
            notes = tool_input.get("notes", "")
            
            if not all([patient_name, patient_phone, patient_birth_date, appointment_date, appointment_time]):
                return "Todos os campos obrigat√≥rios devem ser preenchidos."
            
            # Normalizar telefone
            normalized_phone = normalize_phone(patient_phone)
            
            # Converter datas
            birth_date = parse_date_br(patient_birth_date)
            appointment_datetime = parse_date_br(appointment_date)
            
            if not birth_date or not appointment_datetime:
                return "Formato de data inv√°lido. Use DD/MM/AAAA."
            
            # Combinar data e hor√°rio
            try:
                time_obj = datetime.strptime(appointment_time, '%H:%M').time()
                appointment_datetime = datetime.combine(appointment_datetime.date(), time_obj)
            except ValueError:
                return "Formato de hor√°rio inv√°lido. Use HH:MM."
            
            # Verificar se hor√°rio est√° dispon√≠vel
            duracao = self.clinic_info.get('regras_agendamento', {}).get('duracao_consulta_minutos', 45)
            available_slots = appointment_rules.get_available_slots(appointment_datetime.date(), duracao, db)
            
            if appointment_datetime.time() not in [slot.time() for slot in available_slots]:
                return f"‚ùå Hor√°rio {appointment_time} n√£o est√° dispon√≠vel. Use a tool check_availability para ver hor√°rios dispon√≠veis."
            
            # Criar agendamento
            appointment = Appointment(
                patient_name=patient_name,
                patient_phone=normalized_phone,
                patient_birth_date=patient_birth_date,  # Manter como string
                appointment_date=appointment_datetime.date(),
                appointment_time=appointment_datetime.time(),
                duration_minutes=duracao,
                status=AppointmentStatus.AGENDADA,
                notes=notes
            )
            
            db.add(appointment)
            db.commit()
            
            return f"‚úÖ **Agendamento realizado com sucesso!**\n\n" + \
                   f"üë§ **Paciente:** {patient_name}\n" + \
                   f"üìÖ **Data:** {appointment_datetime.strftime('%d/%m/%Y')}\n" + \
                   f"‚è∞ **Hor√°rio:** {appointment_datetime.strftime('%H:%M')}\n" + \
                   f"‚è±Ô∏è **Dura√ß√£o:** {duracao} minutos\n" + \
                   f"üìû **Telefone:** {normalized_phone}\n\n" + \
                   "Obrigado por escolher nossa cl√≠nica! üòä"
                   
        except Exception as e:
            logger.error(f"Erro ao criar agendamento: {str(e)}")
            db.rollback()
            return f"Erro ao criar agendamento: {str(e)}"

    def _handle_search_appointments(self, tool_input: Dict, db: Session) -> str:
        """Tool: search_appointments"""
        try:
            phone = tool_input.get("phone")
            name = tool_input.get("name")
            
            if not phone and not name:
                return "Informe o telefone ou nome do paciente para buscar."
            
            query = db.query(Appointment)
            
            if phone:
                normalized_phone = normalize_phone(phone)
                query = query.filter(Appointment.patient_phone == normalized_phone)
            
            if name:
                query = query.filter(Appointment.patient_name.ilike(f"%{name}%"))
            
            appointments = query.order_by(Appointment.appointment_date.desc(), Appointment.appointment_time.desc()).all()
            
            if not appointments:
                return "Nenhum agendamento encontrado."
            
            response = f"üìÖ **Agendamentos encontrados:**\n\n"
            
            for i, apt in enumerate(appointments, 1):
                status_emoji = {
                    AppointmentStatus.AGENDADA: "‚úÖ",
                    AppointmentStatus.CANCELADA: "‚ùå",
                    AppointmentStatus.REALIZADA: "‚úÖ"
                }.get(apt.status, "‚ùì")
                
                response += f"{i}. {status_emoji} **{apt.patient_name}**\n"
                response += f"   üìÖ {apt.appointment_date.strftime('%d/%m/%Y √†s')} {apt.appointment_time.strftime('%H:%M')}\n"
                response += f"   üìû {apt.patient_phone}\n"
                response += f"   üìù Status: {apt.status.value}\n"
                if apt.notes:
                    response += f"   üí¨ {apt.notes}\n"
                response += "\n"
            
            return response
        
        except Exception as e:
            logger.error(f"Erro ao buscar agendamentos: {str(e)}")
            return f"Erro ao buscar agendamentos: {str(e)}"

    def _handle_cancel_appointment(self, tool_input: Dict, db: Session) -> str:
        """Tool: cancel_appointment"""
        try:
            appointment_id = tool_input.get("appointment_id")
            reason = tool_input.get("reason")
            
            if not appointment_id or not reason:
                return "ID do agendamento e motivo s√£o obrigat√≥rios."
            
            appointment = db.query(Appointment).filter(Appointment.id == appointment_id).first()
            
            if not appointment:
                return "Agendamento n√£o encontrado."
            
            if appointment.status == AppointmentStatus.CANCELADA:
                return "Este agendamento j√° foi cancelado."
            
            # Cancelar agendamento
            appointment.status = AppointmentStatus.CANCELADA
            appointment.cancelled_at = now_brazil()
            appointment.cancelled_reason = reason
            appointment.updated_at = now_brazil()
            
            db.commit()
            
            return f"‚úÖ **Agendamento cancelado com sucesso!**\n\n" + \
                   f"üë§ **Paciente:** {appointment.patient_name}\n" + \
                   f"üìÖ **Data:** {appointment.appointment_date.strftime('%d/%m/%Y √†s')} {appointment.appointment_time.strftime('%H:%M')}\n" + \
                   f"üìù **Motivo:** {reason}\n\n" + \
                   "Se precisar reagendar, estarei aqui para ajudar! üòä"
                   
        except Exception as e:
            logger.error(f"Erro ao cancelar agendamento: {str(e)}")
            db.rollback()
            return f"Erro ao cancelar agendamento: {str(e)}"

    def _handle_request_human_assistance(self, tool_input: Dict, db: Session, phone: str) -> str:
        """Tool: request_human_assistance - Pausar bot para atendimento humano"""
        try:
            logger.info(f"üõë Tool request_human_assistance chamada para {phone}")
            
            # Buscar contexto pelo phone
            context = db.query(ConversationContext).filter_by(phone=phone).first()
            if not context:
                context = ConversationContext(phone=phone)
                db.add(context)
            
            # Pausar por 2 horas
            context.status = "paused_human"
            context.paused_until = datetime.utcnow() + timedelta(hours=2)
            context.messages = []  # Limpar contexto
            context.flow_data = {}
            flag_modified(context, 'messages')
            flag_modified(context, 'flow_data')
            context.last_activity = datetime.utcnow()
            db.commit()
            
            logger.info(f"‚è∏Ô∏è Bot pausado para {phone} at√© {context.paused_until}")
            return "Claro! Vou transferir voc√™ para nossa equipe. Um momento! üôã"
            
        except Exception as e:
            logger.error(f"Erro ao pausar bot para humano: {str(e)}")
            db.rollback()
            return f"Erro ao transferir para humano: {str(e)}"

    def _handle_end_conversation(self, tool_input: Dict, db: Session, phone: str) -> str:
        """Tool: end_conversation - Encerrar conversa e limpar contexto"""
        try:
            logger.info(f"üîö Tool end_conversation chamada para {phone}")
            
            # Buscar e deletar contexto
            context = db.query(ConversationContext).filter_by(phone=phone).first()
            if context:
                db.delete(context)
                db.commit()
                logger.info(f"üóëÔ∏è Contexto deletado para {phone}")
            
            return "Foi um prazer atend√™-lo(a)! At√© logo! üòä"
            
        except Exception as e:
            logger.error(f"Erro ao encerrar conversa: {str(e)}")
            db.rollback()
            return f"Erro ao encerrar conversa: {str(e)}"


# Inst√¢ncia global do agente
ai_agent = ClaudeToolAgent()
