"""
Script para rodar o bot localmente.
"""
import uvicorn
import sys
import os
import json

def check_environment():
    """Verifica se o ambiente est√° configurado corretamente para Railway."""
    errors = []
    
    # No Railway, as vari√°veis de ambiente s√£o definidas diretamente, n√£o via .env
    # Ent√£o, removemos a verifica√ß√£o do arquivo .env aqui.
    
    # Verificar e criar google-credentials.json a partir da vari√°vel de ambiente
    if not os.path.exists('google-credentials.json'):
        google_creds_json = os.getenv("GOOGLE_CREDENTIALS")
        if google_creds_json:
            try:
                # Tenta parsear para validar e depois escreve
                json.loads(google_creds_json) 
                with open('google-credentials.json', 'w') as f:
                    f.write(google_creds_json)
                print("‚úÖ Arquivo google-credentials.json criado a partir da vari√°vel de ambiente.")
            except json.JSONDecodeError:
                errors.append("‚ùå Vari√°vel GOOGLE_CREDENTIALS inv√°lida (n√£o √© um JSON v√°lido).")
        else:
            print("‚ö†Ô∏è  Vari√°vel GOOGLE_CREDENTIALS n√£o encontrada.")
            print("   O bot funcionar√°, mas sem integra√ß√£o com Google Calendar.")
    else:
        print("‚úÖ Arquivo google-credentials.json encontrado.")
    
    # Verificar data/clinic_info.json
    if not os.path.exists('data/clinic_info.json'):
        errors.append("‚ùå Arquivo data/clinic_info.json n√£o encontrado!")
    else:
        print("‚úÖ Arquivo data/clinic_info.json encontrado.")

    # Verificar vari√°veis de ambiente essenciais
    required_env_vars = ["ANTHROPIC_API_KEY", "WASENDER_API_KEY", "WASENDER_URL", "WASENDER_PROJECT_NAME", "GOOGLE_CALENDAR_ID"]
    for var in required_env_vars:
        if not os.getenv(var):
            errors.append(f"‚ùå Vari√°vel de ambiente '{var}' n√£o configurada.")
        else:
            print(f"‚úÖ Vari√°vel de ambiente '{var}' configurada.")

    if errors:
        print("\nPor favor, configure o ambiente antes de rodar o bot.")
        print("Veja SETUP_GUIDE.md para instru√ß√µes detalhadas.")
        for error in errors:
            print(error)
        sys.exit(1)
    else:
        print("\n‚úÖ Ambiente configurado corretamente!")


if __name__ == "__main__":
    print("ü§ñ WhatsApp Clinic Bot")
    print("=" * 50)
    
    print("üîç Verificando ambiente...")
    check_environment()
    
    print("üöÄ Iniciando servidor Uvicorn...")
    try:
        port = int(os.getenv("PORT", 8000))
        print(f"üì° Porta configurada: {port}")
        
        print("üîÑ Iniciando FastAPI...")
        uvicorn.run(
            "app.main:app",
            host="0.0.0.0",
            port=port,
            reload=False,  # Desabilitado para produ√ß√£o
            log_level="info"
        )
    except Exception as e:
        print(f"‚ùå ERRO FATAL ao iniciar o servidor Uvicorn: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

